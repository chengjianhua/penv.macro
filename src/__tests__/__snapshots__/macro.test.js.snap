// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`penv.macro # with config macros should remove expression if \`env\` is a standalone expression: should remove expression if \`env\` is a standalone expression 1`] = `
"
import penv from '../../macro';
  
penv({
  unmatched: () => {},
});

      ↓ ↓ ↓ ↓ ↓ ↓


"
`;

exports[`penv.macro # with config macros should replace default function value when didn't match and default value is provided: should replace default function value when didn't match and default value is provided 1`] = `
"
import inlineEnv from '../../macro';
  
const variable = inlineEnv({
  development: 'development',
  staging: 'staging',
  production: 'production',
}, () => 'defaultStringValue');

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = () => 'defaultStringValue';
"
`;

exports[`penv.macro # with config macros should replace default object value when didn't match and default value is provided: should replace default object value when didn't match and default value is provided 1`] = `
"
import inlineEnv from '../../macro';
  
const variable = inlineEnv({
  development: 'development',
  staging: 'staging',
  production: 'production',
}, { defaultStringValue: 'defaultStringValue'});

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = {
  defaultStringValue: 'defaultStringValue'
};
"
`;

exports[`penv.macro # with config macros should replace default string value when didn't match and default value is provided: should replace default string value when didn't match and default value is provided 1`] = `
"
import inlineEnv from '../../macro';
  
const variable = inlineEnv({
  development: 'development',
  staging: 'staging',
  production: 'production',
}, 'defaultStringValue');

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = 'defaultStringValue';
"
`;

exports[`penv.macro # with config macros should replace the environment variable to the matched value via regexp: should replace the environment variable to the matched value via regexp 1`] = `
"
import env from '../../macro';

const variable = env({
  development: 'development',
  staging: 'staging',
  production: 'production',
  [/^(test|production)$/]: () => {
    console.log('test');
    
    return 'test';
  }
});

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = () => {
  console.log('test');
  return 'test';
};
"
`;

exports[`penv.macro # with config macros should replace the environment variable to the matched value: should replace the environment variable to the matched value 1`] = `
"
import env from '../../macro';

const variable = env({
  development: 'development',
  staging: 'staging',
  production: 'production',
  test: () => {
    console.log('test');
    
    return 'test';
  }
});

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = () => {
  console.log('test');
  return 'test';
};
"
`;

exports[`penv.macro # with config macros should use \`null\` as default value if no relevant value was matched: should use \`null\` as default value if no relevant value was matched 1`] = `
"
import inlineEnv from '../../macro';
  
const variable = inlineEnv({
  development: 'development',
  staging: 'staging',
  production: 'production',
});

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = null;
"
`;

exports[`penv.macro # without config macros should remove expression if \`env\` is a standalone expression: should remove expression if \`env\` is a standalone expression 1`] = `
"
import penv from '../../macro';
  
penv({
  unmatched: () => {},
});

      ↓ ↓ ↓ ↓ ↓ ↓


"
`;

exports[`penv.macro # without config macros should replace default function value when didn't match and default value is provided: should replace default function value when didn't match and default value is provided 1`] = `
"
import inlineEnv from '../../macro';
  
const variable = inlineEnv({
  development: 'development',
  staging: 'staging',
  production: 'production',
}, () => 'defaultStringValue');

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = () => 'defaultStringValue';
"
`;

exports[`penv.macro # without config macros should replace default object value when didn't match and default value is provided: should replace default object value when didn't match and default value is provided 1`] = `
"
import inlineEnv from '../../macro';
  
const variable = inlineEnv({
  development: 'development',
  staging: 'staging',
  production: 'production',
}, { defaultStringValue: 'defaultStringValue'});

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = {
  defaultStringValue: 'defaultStringValue'
};
"
`;

exports[`penv.macro # without config macros should replace default string value when didn't match and default value is provided: should replace default string value when didn't match and default value is provided 1`] = `
"
import inlineEnv from '../../macro';
  
const variable = inlineEnv({
  development: 'development',
  staging: 'staging',
  production: 'production',
}, 'defaultStringValue');

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = 'defaultStringValue';
"
`;

exports[`penv.macro # without config macros should replace the environment variable to the matched value via regexp: should replace the environment variable to the matched value via regexp 1`] = `
"
import env from '../../macro';

const variable = env({
  development: 'development',
  staging: 'staging',
  production: 'production',
  [/^(test|production)$/]: () => {
    console.log('test');
    
    return 'test';
  }
});

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = () => {
  console.log('test');
  return 'test';
};
"
`;

exports[`penv.macro # without config macros should replace the environment variable to the matched value: should replace the environment variable to the matched value 1`] = `
"
import env from '../../macro';

const variable = env({
  development: 'development',
  staging: 'staging',
  production: 'production',
  test: () => {
    console.log('test');
    
    return 'test';
  }
});

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = () => {
  console.log('test');
  return 'test';
};
"
`;

exports[`penv.macro # without config macros should use \`null\` as default value if no relevant value was matched: should use \`null\` as default value if no relevant value was matched 1`] = `
"
import inlineEnv from '../../macro';
  
const variable = inlineEnv({
  development: 'development',
  staging: 'staging',
  production: 'production',
});

      ↓ ↓ ↓ ↓ ↓ ↓

const variable = null;
"
`;
